
def foo(b)
    local.c = false

    if local.b
        global.test = "was true"
        return "val is true"
    else
        global.test = "was false"
    end

    local.fac = fac(5)
    local.test = _eq(local.fac, 120)
    if local.test
        global.data3 = true
    else
        global.data4 = global.test
    end

    return "val is false"
end

def fac(num)
    local.isOne = _eq(local.num, 1)
    if local.isOne
        return local.num
    end

    local.aux = _sub(local.num, 1)
    local.recRes = fac(local.aux)
    local.res = _mul(local.num, local.recRes)
    return local.res
end

def inMain(msg)
    local.test = _eq(local.msg.type, "type1")
    if local.test
        global.type1data = local.msg.type
    else
        local.test = _eq(local.msg.type, "type2")
        if local.test
            global.type2data = local.msg.type
        end
    end

    return local.msg.type
end

def check2(str, ch, index)
    local.len = _length(local.str)
    local.test = _geqt(local.index, local.len)
    if local.test
        return false
    else

    local.strCh = _ch(local.str, local.index)
    local.test = _eq(local.ch, local.strCh)
    if local.test
       return true
    end

    local.nIndex = _add(local.index, 1)
    local.test = check2(local.str, local.ch, local.nIndex)
    return local.test
end

def check3(data)
    local.test = _eq(local.data, global.data)
    return local.test
end

def check(data, index)
    local.test = _eq(local.index, 0)
    if local.test
        return false
    end

    local.n = _add(local.index, global.n)
    local.test = check(local.data, local.n)
    return local.test
end

def main(msg)
    global.n = -1

    local.test = check(local.msg, 5)
    if local.test
        global.type1data = "data"
    else
        global.type2Data = "otherData"
    end

    return local.msg
end